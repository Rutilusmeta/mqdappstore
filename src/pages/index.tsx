import Head from 'next/head'
import { Inter } from 'next/font/google'
import { useCallback, useEffect, useRef, useState } from 'react'
import { Flex } from '@chakra-ui/react'
import styles from '@/styles/Home.module.css'
import { useInfiniteQuery } from '@tanstack/react-query'
import { Project } from '@/types/Project'
import ProjectListItem from '@/components/ProjectListItem'
import { getAllChains } from 'evm-chains'
import { IChainData } from 'evm-chains/dist/cjs/types'

const inter = Inter({ subsets: ['latin'] })
const LIMIT = 10

export default function Home() {
  const [chains, setChains] = useState<IChainData[]>([])

  useEffect(() => {
    setChains(getAllChains())
  }, [])

  const observerElem = useRef(null)

   const getDapps = async (page : number) => {
      return await fetch(
         `https://api-a.meroku.store/dapp?page=${page}&limit=${LIMIT}`
      ).then((res) => res.json())
   }

   const {
      data,
      error,
      fetchNextPage,
      hasNextPage,
      isFetching,
      isFetchingNextPage,
      status,
   } = useInfiniteQuery({
      queryKey: ['dapps'],
      queryFn: ({ pageParam = 1 }) => getDapps(pageParam),
      getNextPageParam: (lastPage, pages) => pages.length + 1
   })

   const handleObserver = useCallback(
      (entries: any) => {
         const [target] = entries
         if (target.isIntersecting) {
            fetchNextPage()
         }
      },
      [fetchNextPage, hasNextPage]
   )

   useEffect(() => {
      const element = observerElem.current
      const option = { threshold: 0 }

      const observer = new IntersectionObserver(handleObserver, option)
      if (element) {
        observer.observe(element)
      }
      return () => {
        if (element) observer.unobserve(element)
      }
   }, [fetchNextPage, hasNextPage, handleObserver])

   console.log(data, chains)

   // Error and loading states
   if (status === 'loading') return 'Loading...'
   if (status === 'error' && error) return 'An error has occurred: ' + error

   return (
      <>
         <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta
               name="viewport"
               content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <main className={styles.main} style={inter.style}>
            <Flex>
               {data?.pages.map((page, i) =>
                  page?.response?.map((project: Project, i: number) => {
                     if (page.length >= 3 && page.length - 3 === i) {
                        return (
                           <ProjectListItem
                              key={project.dappId}
                              project={project}
                           />
                        )
                     }
                     return (
                        <ProjectListItem
                           key={project.dappId}
                           project={project}
                        />
                     )
                  })
               )}
            </Flex>
            <div className="loader" ref={observerElem}>
               {isFetchingNextPage && hasNextPage ? 'Loading...' : ''}
            </div>
         </main>
      </>
   )
}
